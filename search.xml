<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>浅谈C++头文件---&lt;iostream&gt;</title>
      <link href="/%E6%B5%85%E8%B0%88C++%E5%A4%B4%E6%96%87%E4%BB%B6---iostream/"/>
      <url>/%E6%B5%85%E8%B0%88C++%E5%A4%B4%E6%96%87%E4%BB%B6---iostream/</url>
      <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>在刷题时看人家c++的题解，大部分前面都用了这个头文件：<span class="label info">#include<iostream></iostream></span>（输入输出流）。虽然我们经常使用这个easy的头文件，可是否有探究过这个头文件呢？让我们来看看吧！</p><h2 id="2-功能"><a href="#2-功能" class="headerlink" title="2 功能"></a>2 功能</h2><h3 id="2-1-cin"><a href="#2-1-cin" class="headerlink" title="2.1 cin"></a>2.1 cin</h3><p>这个单词读作：see-in。用来读取数据，称为标准输入，与c中的scanf效果相仿，在使用setw是要调用<iomanip>噢！</iomanip></p><h3 id="2-2-cout"><a href="#2-2-cout" class="headerlink" title="2.2 cout"></a>2.2 cout</h3><p>这个单词读作：see-out。用来输出数据，称为标准输出，与c中的printf效果相仿噢！</p><div class="note info"><p><br><br>换行有三种方式：<br><br>‘\n’<br><br>“\n”<br><br>endl<br><br></p></div><h3 id="2-3-其它"><a href="#2-3-其它" class="headerlink" title="2.3 其它"></a>2.3 其它</h3><p>经实验，发现max函数和min函数也包括在内，是不是很兴奋呀？</p>]]></content>
      
      <categories>
          
          <category> C++ </category>
          
          <category> 头文件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 头文件 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>重装windows10记录</title>
      <link href="/%E9%87%8D%E8%A3%85windows10%E8%AE%B0%E5%BD%95/"/>
      <url>/%E9%87%8D%E8%A3%85windows10%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>在2017年末到大年初一这一天（2018-2-16），我捣鼓了docker、python、visual studio、Node.js等一堆信息类的东西，以至于我win10(x64)的电脑，向卡的道路突飞猛进。今天，我就给电脑来了次“脱胎换骨”。</p><a id="more"></a><p><img src="https://i.loli.net/2018/02/16/5a869dae6dcc5.jpg" alt=""></p><h2 id="2-准备"><a href="#2-准备" class="headerlink" title="2 准备"></a>2 准备</h2><p>这一部分，讲述准备前的工作</p><h3 id="2-1-材料"><a href="#2-1-材料" class="headerlink" title="2.1 材料"></a>2.1 材料</h3><p>一个U盘（至少4G，最好8G）</p><p>一台电脑（即你需要重装的电脑）</p><h3 id="2-2-工具"><a href="#2-2-工具" class="headerlink" title="2.2 工具"></a>2.2 工具</h3><div class="tabs" id="sixth-unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#sixth-unique-name-1">下载工具</a></li><li class="tab"><a href="#sixth-unique-name-2">接受许可条款</a></li><li class="tab"><a href="#sixth-unique-name-3">安装介质</a></li><li class="tab"><a href="#sixth-unique-name-4">选择新系统配置</a></li><li class="tab"><a href="#sixth-unique-name-5">选择介质</a></li><li class="tab"><a href="#sixth-unique-name-6">选择U盘</a></li></ul><div class="tab-content"><div class="tab-pane active" id="sixth-unique-name-1"><p>我们要去微软官方下载制作启动盘的软件。</p><p><div class="note warning"><p>不建议下载第三方乱七八糟的制作启动盘的工具，用官方最好</p></div><br><a class="btn" href="https://go.microsoft.com/fwlink/?LinkId=691209" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>点击下载工具</a></p></div><div class="tab-pane" id="sixth-unique-name-2"><p>打开工具，稍等一会，会出现接受许可条款。接受即可。<br><img src="https://i.loli.net/2018/03/07/5a9ff1ef29019.jpg" alt=""><br><img src="https://i.loli.net/2018/03/07/5a9ff25310e4f.jpg" alt=""></p></div><div class="tab-pane" id="sixth-unique-name-3"><p>因为我是刷机，所以我选第二项。<br><img src="https://i.loli.net/2018/03/07/5a9ff36bc619e.jpg" alt=""></p></div><div class="tab-pane" id="sixth-unique-name-4"><p>直接给“对这台电脑使用推荐的选项”打勾即可。<br><img src="https://i.loli.net/2018/03/07/5a9ff403767ea.jpg" alt=""></p></div><div class="tab-pane" id="sixth-unique-name-5"><p>我木有DVD，选U盘。<br><img src="https://i.loli.net/2018/03/07/5a9ff4742437b.jpg" alt=""></p></div><div class="tab-pane" id="sixth-unique-name-6"><p>选择U盘就好了。</p><div class="note warning"><p>U盘先要格式化</p></div></div></div></div><p>相信，剩下的设置也不会太难了，大家根据自己的电脑选择即可（^_^）</p><h3 id="2-3高级启动选项"><a href="#2-3高级启动选项" class="headerlink" title="2.3高级启动选项"></a>2.3高级启动选项</h3><p>win7系统直接使用BIOS就好了，win10有图形化界面。</p><p>打开设置，进入更新和安全，选择恢复，点击高级启动的立即重新启动即可。建议多试几次，有的时候检测不出U盘。</p><h3 id="2-4-设置"><a href="#2-4-设置" class="headerlink" title="2.4 设置"></a>2.4 设置</h3><p>在重启电脑后安装，只需要更具自己原来的windows设置即可。</p><div class="note warning"><p>在选择系统盘的时候，不会出现C盘、D盘这类东西，所以要事先把原系统盘的空间大小给记住</p></div><h3 id="2-5-小结"><a href="#2-5-小结" class="headerlink" title="2.5 小结"></a>2.5 小结</h3><p>正常设置后，一个崭新的win10就趁现在眼前啦！！！</p><h2 id="3-软件安装"><a href="#3-软件安装" class="headerlink" title="3 软件安装"></a>3 软件安装</h2><p>必备：</p><p>office</p><p>chrome</p><p>360</p><p>完美解码</p><p>vs2017</p><p>TIM</p><p>git</p><p>Node.js</p><p>Typora</p><p>Subline Text 3</p><p>可选：</p><p>Adobe</p><p>Cmder</p><p>Fiddler</p><p>Android Studio</p><p>docker</p><h2 id="4-结束"><a href="#4-结束" class="headerlink" title="4 结束"></a>4 结束</h2><p>本次危险又有趣的win10重装就结束啦！！！</p>]]></content>
      
      <categories>
          
          <category> Blog </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Pages </tag>
            
            <tag> Node.js </tag>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hustOJ的搭建与使用-0目录</title>
      <link href="/hustOJ%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-0%E7%9B%AE%E5%BD%95/"/>
      <url>/hustOJ%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-0%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://baike.baidu.com/item/Online%20Judge/2397914" title="Online Judge" target="_blank" rel="noopener">Online Judge</a> 系统（简称 OJ ）是在线判题系统，用户在 OJ 上可以在线提交程序多种程序源代码，系统对源代码进行编译和执行，并通过预先设计的测试数据来检验程序源代码的正确性。当然，除了评测代码以外，各种 OJ 还提供别的功能，比如讨论社区、比赛等。<br>(摘自<a href="https://zhuanlan.zhihu.com/p/30967287" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/30967287</a>)</p><a id="more"></a><p>目前也有很多著名的OJ，如本人使用的<a href="https://www.luogu.org/" title="洛谷" target="_blank" rel="noopener">洛谷</a>（极力推荐）、Vijos4(<a href="https://github.com/vijos/vj4" title="开源" target="_blank" rel="noopener">开源</a>)、<a href="https://qduoj.com/" title="青岛大学的OJ" target="_blank" rel="noopener">青岛大学的OJ</a>（页面十分美观）。如大家想搭建一个OJ，选开源的再好不过。本人也正是用<a href="https://github.com/freefcw/hustoj" title="HUSTOJ" target="_blank" rel="noopener">HUSTOJ</a>（<a href="https://github.com/zhblue/hustoj" title="中文" target="_blank" rel="noopener">中文</a>）写出这篇文章。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h4 id="1：配置环境"><a href="#1：配置环境" class="headerlink" title="#1：配置环境"></a>#1：配置环境</h4><h4 id="2：正式搭建ヽ-￣▽￣-ﾉ"><a href="#2：正式搭建ヽ-￣▽￣-ﾉ" class="headerlink" title="#2：正式搭建ヽ(￣▽￣)ﾉ"></a>#2：正式搭建ヽ(￣▽￣)ﾉ</h4><h4 id="3：开始使用"><a href="#3：开始使用" class="headerlink" title="#3：开始使用"></a>#3：开始使用</h4><h4 id="4：QAQ"><a href="#4：QAQ" class="headerlink" title="#4：QAQ"></a>#4：QAQ</h4>]]></content>
      
      <categories>
          
          <category> OnlineJudge </category>
          
          <category> hustoj </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OnlineJudge </tag>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> hustoj </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo 1：利用Hexo+GitHub Pages开发自己的博客</title>
      <link href="/Hexo%201%EF%BC%9A%E5%88%A9%E7%94%A8Hexo+GitHub%20Pages%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/Hexo%201%EF%BC%9A%E5%88%A9%E7%94%A8Hexo+GitHub%20Pages%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/01/13/5a5a26b754feb.jpg" alt=""></p><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>本篇教程基于Windows10，Windows其他版本差异不大，可供参考。本人搜集整合网上的资料，以及坑坑坑，写出本篇文章，部分内容可能会与其他教程雷同，请不要介意。</p><a id="more"></a><h2 id="2-资料"><a href="#2-资料" class="headerlink" title="2 资料"></a>2 资料</h2><h3 id="2-1-Github"><a href="#2-1-Github" class="headerlink" title="2.1 Github"></a>2.1 <a href="https://github.com/" target="_blank" rel="noopener">Github</a></h3><p>gitHub是一个面向[开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。</p><p> gitHub于2008年4月10日正式上线，除了git代码仓库托管及基本的 Web管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑器、协作图谱（报表）、代码片段分享（Gist）等功能。目前，其注册用户已经超过350万，托管版本数量也是非常之多，其中不乏知名开源项目 Rubyon Rails、jQuery、python等</p><h3 id="2-2-Github-Pages"><a href="#2-2-Github-Pages" class="headerlink" title="2.2 Github Pages"></a>2.2 <a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages</a></h3><p>GitHub Pages是一个静态站点托管服务。</p><p>GitHub Pages设计用于直接从GitHub存储库托管您的个人，组织或项目页面。要详细了解GitHub Pages网站的不同类型，请参阅“<a href="https://help.github.com/articles/user-organization-and-project-pages/" target="_blank" rel="noopener">用户，组织和项目页面</a>“。</p><p>您可以在线创建和发布GitHub页面。如果您更喜欢在本地工作，则可以使用 <a href="http://desktop.github.com/" target="_blank" rel="noopener">GitHub Desktop</a> 或 <a href="https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line" target="_blank" rel="noopener">命令行</a>。</p><p>GitHub Pages是一个静态网站托管服务，不支持服务器端代码，如PHP，Ruby或Python</p><h3 id="2-3-Git-分布式版本控制系统-官网地址-（吐槽，页面太简陋）"><a href="#2-3-Git-分布式版本控制系统-官网地址-（吐槽，页面太简陋）" class="headerlink" title="2.3 Git(分布式版本控制系统)  -官网地址 （吐槽，页面太简陋）"></a>2.3 <a href="https://baike.baidu.com/item/GIT/12647237?fr=aladdin" target="_blank" rel="noopener">Git(分布式版本控制系统)</a>  -<a href="https://git-scm.com/" target="_blank" rel="noopener">官网地址</a> （吐槽，页面太简陋）</h3><p>Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><p>Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><h3 id="2-4-Node-js-官网地址"><a href="#2-4-Node-js-官网地址" class="headerlink" title="2.4 Node.js  -官网地址"></a>2.4 <a href="https://baike.baidu.com/item/node.js/7567977?fr=aladdin" target="_blank" rel="noopener">Node.js</a>  -<a href="https://nodejs.org/en/" target="_blank" rel="noopener">官网地址</a></h3><p>Node.js是一个Javascript运行环境(runtime)，发布于2009年5月，由Ryan Dahl开发，实质是对Chrome V8引擎进行了封装。Node.js对一些特殊用例进行优化，提供替代的API，使得V8在非浏览器环境下运行得更好。</p><p>V8引擎执行Javascript的速度非常快，性能非常好。Node.js是一个基于Chrome JavaScript运行时建立的平台， 用于方便地搭建响应速度快、易于扩展的网络应用。Node.js 使用事件驱动， 非阻塞I/O模型而得以轻量和高效，非常适合在分布式设备上运行数据密集型的实时应用。</p><h3 id="2-5-Hexo"><a href="#2-5-Hexo" class="headerlink" title="2.5 Hexo"></a>2.5 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a></h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="3-正式搭建"><a href="#3-正式搭建" class="headerlink" title="3 正式搭建"></a>3 正式搭建</h2><p>讲了真么多，该实践了，就开始在萎软（滑稽）上开始搭建自己的Blog-Hexo。</p><h3 id="3-1-配置环境"><a href="#3-1-配置环境" class="headerlink" title="3.1 配置环境"></a>3.1 配置环境</h3><h4 id="3-1-1-安装Node-js"><a href="#3-1-1-安装Node-js" class="headerlink" title="3.1.1 安装Node.js"></a>3.1.1 安装Node.js</h4><p>我已在资料中提供了网址，点击后在界面中会有两个模块，如下图：</p><p><img src="https://i.loli.net/2018/01/13/5a5a273348688.jpg" alt=""></p><p>两个都可以选择，下载可能较慢，唯有等待，也可以参见网上的其他方法。下载下来后，打开.msi文件，一路next即可。</p><div class="note info"><p>如若不是x64，在导航栏选择Download，在里面下载即可。附：<a href="https://npm.taobao.org/mirrors/node" target="_blank" rel="noopener">淘宝国内镜像的快速安装网址</a></p></div><h4 id="3-1-2-安装Git-下载地址"><a href="#3-1-2-安装Git-下载地址" class="headerlink" title="3.1.2 安装Git  下载地址"></a>3.1.2 安装Git  <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载地址</a></h4><p>点击，缓慢的等待即可（哭哭。。。哭）</p><h3 id="3-2-搭建Hexo"><a href="#3-2-搭建Hexo" class="headerlink" title="3.2 搭建Hexo"></a>3.2 搭建Hexo</h3><p>经过长长长的等待，终于可以再来一次长长长的等待了！！！</p><p><img src="https://i.loli.net/2018/01/13/5a5a27d46662b.jpg" alt=""></p><p>生气中。。。。。。</p><h4 id="3-2-1-安装Hexo"><a href="#3-2-1-安装Hexo" class="headerlink" title="3.2.1 安装Hexo"></a>3.2.1 安装Hexo</h4><p>因为npm在国外，被天朝伟大的墙墙墙（<strong>GFW</strong>）挡住了，所以我们使用淘宝的镜像就好啦！</p><p>打开cmd，执行如下命令</p><figure class="highlight plain"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>一定要把360、腾讯电脑管家那些玩意儿给关掉，有几次我失败了，强制关机才干掉电脑。</p><p>正式安装，执行如下命令：</p><figure class="highlight plain"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>（在默认路径即可）</p><h4 id="3-2-2-建立站点"><a href="#3-2-2-建立站点" class="headerlink" title="3.2.2 建立站点"></a>3.2.2 建立站点</h4><p>现在任意一个盘符例建一个文件夹Blog，再在里边建一个文件夹（如your_name.github.io，这会用到Github，在后边介绍）。比如我要进入<code>D:\Blog\your_name.github.io</code>，那就输入 <code>D:</code>回车，然后再<br><figure class="highlight plain"><figcaption><span>所在目录：~/blog/</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd Blog\your_name.github.io</span><br></pre></td></tr></table></figure></p><p>根据 Hexo 的官方文档，依次执行下面两条命令，建立我们的新网站：</p><figure class="highlight plain"><figcaption><span>所在目录：~/blog/</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">cnpm install（如果失败，试npm install）</span><br></pre></td></tr></table></figure><p>现在，你在终端中输入<code>hexo g &amp; hexo s</code>（确保路径不变），然后点开 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，恭喜你！已经在本地搭建好博客了(๑•̀ㅂ•́)و✧！距离成功只差下一步——部署博客到 Github Pages 了～</p><div class="note danger"><p>如果文件夹不为空，会报错。</p></div><h4 id="3-2-3-发布文章"><a href="#3-2-3-发布文章" class="headerlink" title="3.2.3  发布文章"></a>3.2.3  发布文章</h4><p>本章不介绍，下一行将详细介绍，建议先配置，后码文。</p><h4 id="3-2-4-目录介绍"><a href="#3-2-4-目录介绍" class="headerlink" title="3.2.4 目录介绍"></a>3.2.4 目录介绍</h4><p>在你完成3.2.2节时，你会发现主文件夹下的目录是这样的：</p><figure class="highlight plain"><figcaption><span>所在目录：~/blog/</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   └── _posts （文章）</span><br><span class="line">├── public</span><br><span class="line">├── node_modules</span><br><span class="line">├── .deploy_git （没有没关系）</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><ul><li><code>_config.yml</code> 文件存放着网站的配置信息，可以在这里配置大部分的参数。</li><li><code>package.json</code> 文件存放着插件信息，从中可以查看那些插件已经安装。</li><li><code>scaffolds</code> 是模板文件夹，新建文章时，Hexo 会根据 scaffold 来建立文件，不过这个模板和后面的主题里指的模板不一样。</li><li><code>source</code> 是存放用户资源的地方的文件夹。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，其他文件会被拷贝过去。</li><li><code>themes</code> 主题文件夹，Hexo 会根据主题来生成静态页面，我们以后自己安装的主题也都会放在这个文件夹下面，默认的 landscape 主题（丑）已经在里面了。</li><li><code>public</code> 执行hexo generate命令，输出的静态网页内容目录</li><li><code>node_modules</code> 存放Hexo的一些插件等等（病句）。</li><li><code>.deploy_git</code> 执行hexo deploy命令部署到GitHub上的内容目录。</li></ul><h4 id="3-2-5-小结"><a href="#3-2-5-小结" class="headerlink" title="3.2.5 小结"></a>3.2.5 小结</h4><p>3.2节内容详细讲述了安装Hexo的方法，可能还会有一些问题，欢迎QAQ。</p><p>此外，有一些内容将在配置中介绍，可移步一观（点我）。</p><h3 id="3-3-部署到Github上"><a href="#3-3-部署到Github上" class="headerlink" title="3.3 部署到Github上"></a>3.3 部署到Github上</h3><p>我们已经将Hexo的雏形搭建完毕，为了能从外网访问到博客，所以我们将它托管到Github上。</p><table><thead><tr><th>问题</th><th style="text-align:right">解答</th></tr></thead><tbody><tr><td>为什么要部署到 Github Pages 上？</td><td style="text-align:right">首先免费，其次省心，最后可以学习使用 Github。</td></tr><tr><td>Github Pages 有容量限制吗？</td><td style="text-align:right">有，由 What is GitHub Pages? 可知：大小限制为 1 GB，一个月 100 GB 流量。</td></tr><tr><td>超出限制的容量怎么办？</td><td style="text-align:right">讲真，如果图片音乐视频等大文件都放在 七牛云 、阿里云OSS 或其它云存储上，那么压根不用担心，因为我的博客现在也才用了很少 ，所以无需担心。</td></tr><tr><td>国内访问速度行不行，有必要同时部署在 Coding 上吗？</td><td style="text-align:right">个人感觉完全没必要，自己不用梯子时，感觉访问速度可以，毕竟站点的大文件都是放在了云存储上。</td></tr><tr><td>我可以用自己的域名吗？</td><td style="text-align:right">可以，在<code>~/blog/source/</code>目录下添加 CNAME 文件即可，教程自己 Google。</td></tr></tbody></table><h4 id="3-3-1-登录Github"><a href="#3-3-1-登录Github" class="headerlink" title="3.3.1 登录Github"></a>3.3.1 登录Github</h4><p>网上注册Github以及登录有很多教程，在此就不再赘述。</p><p>注：<br>1、Github注册为个人、企业等等都可以，只不过付费的可以设置私密，不让人家看到你的代  码，但也有不计其数的代码在Github上是开放的，除非你是公司机密，否则影响不太大。<br>2、如果嫌官网是英文，可以去下载Chrome的浏览器，它可以自动翻译，从官网下下来后，点安装程序，可能还要下载，等一会即可，如果长时间不行，那你就是被墙拦了（如需上官网下Chrome，请私信我QQ，获取谷歌访问助手，将它装在现有的浏览器上，然后就可以上Google了）。</p><div class="note primary"><p>突然发现自己话好多：）</p></div><h4 id="3-3-2-创建repository"><a href="#3-3-2-创建repository" class="headerlink" title="3.3.2 创建repository"></a>3.3.2 创建repository</h4><p>登录Github后，点右上角的”+”号，会出现一栏，点击”New repository”，设置如下图：</p><p><img src="https://i.loli.net/2018/01/13/5a5a25256d132.png" alt=""></p><p><code>yourname</code>是你的Github的账户名。Description随便写即可。设置完毕后，点击那个绿色键”Create repository”。</p><p>到此，Github上到此结束，接下来，我们要把Git和Github连起来。</p><h4 id="3-3-3-Setting-up-Git"><a href="#3-3-3-Setting-up-Git" class="headerlink" title="3.3.3 Setting up Git"></a>3.3.3 Setting up Git</h4><p>根据 Github 的官方文档  <a href="https://help.github.com/articles/set-up-git/#setting-up-git" target="_blank" rel="noopener">Setting up Git</a> ，这一操作的目的是 Tell Git your <em>name</em> so your commits will be properly labeled 和 Tell Git the <em>email address</em> that will be associated with your Git commits，也就是告诉版本控制软件 Git 接下来这台电脑上提交的文件是 E-mail 地址是什么的谁谁谁提交的。在 Git Bash 中执行如下代码即可：</p><figure class="highlight plain"><figcaption><span>Git Bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;YOUR NAME&quot;</span><br><span class="line">git config --global user.email &quot;YOUR EMAIL ADDRESS&quot;</span><br></pre></td></tr></table></figure><p>其中，<code>YOUR NAME</code> 是自己取的名字，<code>YOUR EMAIL ADDRESS</code> 是自己的邮箱。由于自己的博客网站就自己一个人提交，所以就都设置成跟 Github 用户名和邮箱相同了。但其实是可以不同的，因为对于很多项目，并不只有一个开发者，Github 允许多人向同一个 Repo 提交，这里提供用户名和邮箱，只是为了搞清楚哪些代码是谁谁谁提交的。</p><h4 id="3-3-4-Authenticating-with-GitHub-from-Git"><a href="#3-3-4-Authenticating-with-GitHub-from-Git" class="headerlink" title="3.3.4 Authenticating with GitHub from Git"></a>3.3.4 Authenticating with GitHub from Git</h4><p>这一整章，我们的最终目的是实现在终端中敲入 <code>hexo deploy</code> 后，Hexo 会将我们本地的 <code>public</code> 文件夹下的东西上传到 Github 服务器，这样我们就可以通过 <code>your_name.github.io</code> 这个域名（<code>your_name</code> 是你的 Github 用户名）看到我们已经上网的博客网站了。为了实现这个目的，首先我们先要让本地的电脑和 Github 服务器建立起某种联系，也就是让 Github 服务器信任由我这台电脑提交的东西，接受，并存放到 <code>your_name.github.io</code> 这个 Repo 下面，与 Github 服务器建立信任的这个环节就是身份认证（Authenticating ）。根据 Github 的官方文档 <a href="https://help.github.com/articles/set-up-git/#next-steps-authenticating-with-github-from-git" target="_blank" rel="noopener">Authenticating with GitHub from Git</a> 这里，我们选择 <a href="https://help.github.com/articles/set-up-git/#connecting-over-ssh" target="_blank" rel="noopener">Connecting over SSH</a> 这一种方式。在 Github 的官方文档 <a href="https://help.github.com/categories/authenticating-to-github/" target="_blank" rel="noopener">Categories / SSH</a> 下，我们能找到关于 Github 与 SSH 的资料。</p><h5 id="3-3-4-1-生成新的-SSH-key"><a href="#3-3-4-1-生成新的-SSH-key" class="headerlink" title="3.3.4.1 生成新的 SSH key"></a>3.3.4.1 生成新的 SSH key</h5><p>根据 Github 的官方文档 <a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#generating-a-new-ssh-key" target="_blank" rel="noopener">Generating a new SSH key</a> ， 我们在 Git Bash 下执行如下命令，生成 SSH key</p><figure class="highlight plain"><figcaption><span>Git Bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p>其中，<a href="mailto:`your_email@example.com" target="_blank" rel="noopener">`your_email@example.com</a>` 是你的 Github 注册邮箱。然后，Git Bash 中会出现</p><figure class="highlight plain"><figcaption><span>Git Bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br></pre></td></tr></table></figure><p>表示新的 SSH 已经生成了。随后会出现</p><figure class="highlight plain"><figcaption><span>Git Bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter a file in which to save the key</span><br><span class="line">(/Users/you/.ssh/id_rsa): [Press enter]</span><br></pre></td></tr></table></figure><p>这里 <code>id_rsa</code> 是生成的 key 文件的文件名，默认都是这个；如果不是，在后面用到 <code>id_rsa</code> 的地方请替换成出现的名字。这条信息是让你选择 SSH key 存放的地点，按回车选择默认的即可。回车后，还会出现</p><figure class="highlight plain"><figcaption><span>Git Bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase): [Type a passphrase]</span><br><span class="line">Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure><p>让你设置使用 SSH 密钥时的密码，由于我们都是在自己个人的电脑上操作，所以仍然回车，不设置密码即可。</p><h5 id="3-3-4-2-将-SSH-key-添加到-ssh-agent"><a href="#3-3-4-2-将-SSH-key-添加到-ssh-agent" class="headerlink" title="3.3.4.2 将 SSH key 添加到 ssh-agent"></a>3.3.4.2 将 SSH key 添加到 ssh-agent</h5><p>根据 Wikipedia，ssh-agent 是一个在本地登录会话持续时间内，将未加密的密钥存储在内存中，并使用 Unix 域套接字与 SSH 客户端进行通信的程序。根据 Github 的官方文档 <a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#adding-your-ssh-key-to-the-ssh-agent" target="_blank" rel="noopener">Adding your SSH key to the ssh-agent</a> ， 我们在 Git Bash 下执行如下命令，开启 ssh-agent</p><figure class="highlight plain"><figcaption><span>Git Bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval &quot;$(ssh-agent -s)&quot;</span><br></pre></td></tr></table></figure><p>然后我们要将这个 SSH key 添加到 ssh-agent 里去，运行如下命令，其中 <code>id_rsa</code> 是你的 key 文件的文件名：</p><figure class="highlight plain"><figcaption><span>Git Bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><h5 id="3-3-4-3-将-SSH-key-添加到-Github-账户"><a href="#3-3-4-3-将-SSH-key-添加到-Github-账户" class="headerlink" title="3.3.4.3 将 SSH key 添加到 Github 账户"></a>3.3.4.3 将 SSH key 添加到 Github 账户</h5><p>Github 的官方文档 <a href="https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/" target="_blank" rel="noopener">Adding a new SSH key to your GitHub account</a> 已经图文并茂将如何在 Github 帐号中添加 SSH 介绍的非常清楚了。先是在 Git Bash 中将 SSH Key 拷贝出来：</p><p>进入<code>C:\Users\your_name\.ssh</code>，<code>your_name</code>是你电脑的账户名。进去后，找到<code>id_rsa.pub</code>，用记事本打开，复制里面的内容。然后登录 Github 帐号，依次点击自己的头像，Settings，SSH and GPG keys，New SSH key 或者 Add SSH key， 在 Title 这里输入 Key 的label，比如 your_name - PC，然后在 Key 里面把 SSH Key 粘贴进去，点击 Add SSH key 大功告成。</p><div class="note success"><p>这下我们就已经生成身份认证的凭证 SSH key，分别放在自己本地电脑和 Github 服务器上，以后向 Github 提交内容的时候，两者的 Key 匹配就可以了，省去了我们每次输密码的时间。</p></div><h5 id="3-3-4-4-测试-SSH-连接"><a href="#3-3-4-4-测试-SSH-连接" class="headerlink" title="3.3.4.4 测试 SSH 连接"></a>3.3.4.4 测试 SSH 连接</h5><p>在大功告成之前，为了稳妥起见，我们来测试一下自己跟 Github 服务器 SSH 连接是否已经建立起来了。Github 的官方文档 <a href="https://help.github.com/articles/testing-your-ssh-connection/" target="_blank" rel="noopener">Testing your SSH connection</a> 已经将次环节介绍得非常详细了。我们要做得就是在 Git Bash 中敲入</p><figure class="highlight plain"><figcaption><span>Git Bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>你可能会看到类似于</p><figure class="highlight plain"><figcaption><span>Git Bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &apos;github.com (192.30.252.1)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure><p>输入 <code>yes</code> 敲回车，就可以看到如下的成功信息了</p><figure class="highlight plain"><figcaption><span>Git Bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You&apos;ve successfully authenticated, but GitHub does not</span><br><span class="line">provide shell access.</span><br></pre></td></tr></table></figure><p>至此为止，我们已经建立起了跟 Github 服务器的连接。其实我们也可以用 <code>git push</code> 命令，提交 <code>public</code> 文件夹下面的内容，不过 Hexo 更我们提供了更方便的途径。</p><h4 id="3-3-5-Hexo部署"><a href="#3-3-5-Hexo部署" class="headerlink" title="3.3.5 Hexo部署"></a>3.3.5 Hexo部署</h4><p>Hexo 提供了 <code>hexo deploy</code> 命令，可以方便地将整个 <code>public</code> 文件夹部署到 Github 服务器上去。根据 Hexo 的官方文档 <a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">基本操作 — 部署</a> 我们只需要做以下两步：</p><ul><li><strong>Step 1:</strong> 在终端中运行如下命令，安装 <code>hexo-deployer-git</code> 插件：</li></ul><figure class="highlight plain"><figcaption><span>所在目录：~/blog/</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ul><li><strong>Step 2:</strong> 在<code>_config.yml</code> 中修改参数，如下所示：</li></ul><figure class="highlight diff"><figcaption><span>文件位置：~/blog/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line"><span class="deletion">- type:</span></span><br><span class="line"><span class="addition">+ type: git</span></span><br><span class="line"><span class="addition">+ repo: https://github.com/your_name/your_name.github.io.git</span></span><br><span class="line"><span class="addition">+ branch: master</span></span><br></pre></td></tr></table></figure><p>其中，your_name 是你的 Github 帐号名。<code>repo</code> 对应的是你 <code>your_name.github.io</code> 这个项目的库（Repository）地址，进入这个项目的主页，点击 <strong>Clone or download</strong> 下拉菜单也能看到。<code>branch</code> 是分支名称，如果使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测，通常都是 <code>master</code>。 </p><div class="note warning"><p>注意，冒号后的空格非常重要，一定要有！</p></div><div class="note success"><p>至此，在终端执行 <code>hexo deploy</code> 命令，就可以把我们的网站部署到 Github 服务器上。在第一次部署的时候，Github 还会跳出来一个小窗口，让你输入 Github 帐号和密码，输入即可。根据不少网友的说法以及我之前搭站的经验，等待 15 分钟的样子（也可能更快），就可以通过 your_name.github.io （your_name 是你的 Github 用户名）来访问自己的网站了。</p></div><h3 id="3-4-小结"><a href="#3-4-小结" class="headerlink" title="3.4 小结"></a>3.4 小结</h3><p>在这章中，我们成功搭建了Hexo，并部署了Github Pages。庆祝ヾ(◍°∇°◍)ﾉﾞ</p><h2 id="4-预告"><a href="#4-预告" class="headerlink" title="4 预告"></a>4 预告</h2><p>在下一章中我们会着重论述主题的配置和一些插件，并剖析代码，继续分析Hexo，再见！！！</p>]]></content>
      
      <categories>
          
          <category> Blog </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Pages </tag>
            
            <tag> Node.js </tag>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
